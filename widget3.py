#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.8.9
# In conjunction with Tcl version 8.6
#    Mar 06, 2017 10:03:26 AM
import sys
import estimaters.french_drain

from estimaters.french_drain import *


try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import widget3_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    widget3_support.set_Tk_var()
    top = SBN_Comp_Tools (root)
    widget3_support.init(root, top)
    root.mainloop()

w = None
def create_SBN_Comp_Tools(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    widget3_support.set_Tk_var()
    top = SBN_Comp_Tools (w)
    widget3_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_SBN_Comp_Tools():
    global w
    w.destroy()
    w = None


class SBN_Comp_Tools:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        #s = ttk.Style()
        #s.theme_use('clam')

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x551+432+156")
        top.title("SBN Comp Tools")
        top.configure(highlightbackground="#d9d981")
        top.configure(highlightcolor="black")



        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.0, rely=0.0, relheight=0.23, relwidth=0.99)
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief=GROOVE)
        self.Frame2.configure(highlightbackground="#d9d981")
        self.Frame2.configure(width=595)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(self.Frame2)
        self.TNotebook1.place(relx=0.0, rely=0.0, relheight=1.86, relwidth=0.99)
        self.TNotebook1.configure(width=592)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_pg0 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg0, padding=3)
        self.TNotebook1.tab(0, text="Basics",underline="-1",)
        self.TNotebook1_pg1 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg1, padding=3)
        self.TNotebook1.tab(1, text="Materials",underline="-1",)

        self.Label1 = Label(self.TNotebook1_pg0)
        self.Label1.place(relx=0.29, rely=0.05, height=18, width=47)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(disabledforeground="#a3a361")
        self.Label1.configure(highlightbackground="#d9d981")
        self.Label1.configure(text='''Length''')


        self.Label2 = Label(self.TNotebook1_pg0)
        self.Label2.place(relx=0.29, rely=0.14, height=18, width=40)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(disabledforeground="#a3a361")
        self.Label2.configure(highlightbackground="#d9d981")
        self.Label2.configure(text='''Width''')

        self.Label3 = Label(self.TNotebook1_pg0)
        self.Label3.place(relx=0.29, rely=0.24, height=18, width=41)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(disabledforeground="#a3a361")
        self.Label3.configure(highlightbackground="#d9d981")
        self.Label3.configure(text='''Depth''')

        self.Label4 = Label(self.TNotebook1_pg0)
        self.Label4.place(relx=0.53, rely=0.05, height=18, width=47)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(disabledforeground="#a3a361")
        self.Label4.configure(highlightbackground="#d9d981")
        self.Label4.configure(text='''Tractor''')

        self.Label5 = Label(self.TNotebook1_pg0)
        self.Label5.place(relx=0.53, rely=0.24, height=18, width=38)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(disabledforeground="#a3a361")
        self.Label5.configure(highlightbackground="#d9d981")
        self.Label5.configure(text='''Labor''')

        self.Label6 = Label(self.TNotebook1_pg0)
        self.Label6.place(relx=0.53, rely=0.14, height=18, width=33)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(disabledforeground="#a3a361")
        self.Label6.configure(highlightbackground="#d9d981")
        self.Label6.configure(text='''Miles''')

        self.e_length = Entry(self.TNotebook1_pg0)
        self.e_length.place(relx=0.39, rely=0.05, relheight=0.1, relwidth=0.09)
        self.e_length.configure(background="white")
        self.e_length.configure(disabledforeground="#a3a361")
        self.e_length.configure(font="TkFixedFont")
        self.e_length.configure(highlightbackground="#d9d981")
        self.e_length.configure(selectbackground="#c4c4c4")

        self.e_width = Entry(self.TNotebook1_pg0)
        self.e_width.place(relx=0.39, rely=0.14, relheight=0.1, relwidth=0.09)
        self.e_width.configure(background="white")
        self.e_width.configure(disabledforeground="#a3a361")
        self.e_width.configure(font="TkFixedFont")
        self.e_width.configure(highlightbackground="#d9d981")
        self.e_width.configure(selectbackground="#c4c4c4")

        self.e_depth = Entry(self.TNotebook1_pg0)
        self.e_depth.place(relx=0.39, rely=0.24, relheight=0.1, relwidth=0.09)
        self.e_depth.configure(background="white")
        self.e_depth.configure(disabledforeground="#a3a361")
        self.e_depth.configure(font="TkFixedFont")
        self.e_depth.configure(highlightbackground="#d9d981")
        self.e_depth.configure(selectbackground="#c4c4c4")

        self.e_tractor = Entry(self.TNotebook1_pg0)
        self.e_tractor.place(relx=0.63, rely=0.05, relheight=0.1, relwidth=0.08)
        self.e_tractor.configure(background="white")
        self.e_tractor.configure(disabledforeground="#a3a361")
        self.e_tractor.configure(font="TkFixedFont")
        self.e_tractor.configure(highlightbackground="#d9d981")
        self.e_tractor.configure(selectbackground="#c4c4c4")

        self.e_miles = Entry(self.TNotebook1_pg0)
        self.e_miles.place(relx=0.63, rely=0.14, relheight=0.1, relwidth=0.08)
        self.e_miles.configure(background="white")
        self.e_miles.configure(disabledforeground="#a3a361")
        self.e_miles.configure(font="TkFixedFont")
        self.e_miles.configure(highlightbackground="#d9d981")
        self.e_miles.configure(selectbackground="#c4c4c4")

        self.e_labor = Entry(self.TNotebook1_pg0)
        self.e_labor.place(relx=0.63, rely=0.24, relheight=0.1, relwidth=0.08)
        self.e_labor.configure(background="white")
        self.e_labor.configure(disabledforeground="#a3a361")
        self.e_labor.configure(font="TkFixedFont")
        self.e_labor.configure(highlightbackground="#d9d981")
        self.e_labor.configure(selectbackground="#c4c4c4")

        self.Label7 = Label(self.TNotebook1_pg1)
        self.Label7.place(relx=0.02, rely=0.05, height=18, width=71)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(disabledforeground="#a3a361")
        self.Label7.configure(highlightbackground="#d9d981")
        self.Label7.configure(text='''Corregated''')

        self.combo_corregated = ttk.Combobox(self.TNotebook1_pg1)
        self.combo_corregated.place(relx=0.19, rely=0.05, relheight=0.09
                , relwidth=0.08)
        self.value_list = ['3in','4in','5in','6in',]
        self.combo_corregated.configure(values=self.value_list)
        self.combo_corregated.configure(textvariable=widget3_support.combobox)
        self.combo_corregated.configure(takefocus="")

        self.e_popup = Entry(self.TNotebook1_pg1)
        self.e_popup.place(relx=0.86, rely=0.19, relheight=0.1, relwidth=0.08)
        self.e_popup.configure(background="white")
        self.e_popup.configure(disabledforeground="#a3a361")
        self.e_popup.configure(font="TkFixedFont")
        self.e_popup.configure(highlightbackground="#d9d981")
        self.e_popup.configure(selectbackground="#c4c4c4")

        self.combo_spout = ttk.Combobox(self.TNotebook1_pg1)
        self.combo_spout.place(relx=0.86, rely=0.33, relheight=0.09
                , relwidth=0.08)
        self.combo_spout.configure(textvariable=widget3_support.combobox)
        self.combo_spout.configure(takefocus="")

        self.e_squaregrate = Entry(self.TNotebook1_pg1)
        self.e_squaregrate.place(relx=0.51, rely=0.33, relheight=0.1
                , relwidth=0.08)
        self.e_squaregrate.configure(background="white")
        self.e_squaregrate.configure(disabledforeground="#a3a361")
        self.e_squaregrate.configure(font="TkFixedFont")
        self.e_squaregrate.configure(highlightbackground="#d9d981")
        self.e_squaregrate.configure(selectbackground="#c4c474")

        self.e_coupling = Entry(self.TNotebook1_pg1)
        self.e_coupling.place(relx=0.51, rely=0.19, relheight=0.1, relwidth=0.08)

        self.e_coupling.configure(background="white")
        self.e_coupling.configure(disabledforeground="#a3a361")
        self.e_coupling.configure(font="TkFixedFont")
        self.e_coupling.configure(highlightbackground="#d9d981")
        self.e_coupling.configure(selectbackground="#c4c474")

        self.e_yfit = Entry(self.TNotebook1_pg1)
        self.e_yfit.place(relx=0.51, rely=0.05, relheight=0.1, relwidth=0.08)
        self.e_yfit.configure(background="white")
        self.e_yfit.configure(disabledforeground="#a3a361")
        self.e_yfit.configure(font="TkFixedFont")
        self.e_yfit.configure(highlightbackground="#d9d981")
        self.e_yfit.configure(selectbackground="#c4c474")

        self.e_trenchgrate = Entry(self.TNotebook1_pg1)
        self.e_trenchgrate.place(relx=0.86, rely=0.05, relheight=0.1, relwidth=0.08)
        self.e_trenchgrate.configure(background="white")
        self.e_trenchgrate.configure(disabledforeground="#a3a361")
        self.e_trenchgrate.configure(font="TkFixedFont")
        self.e_trenchgrate.configure(highlightbackground="#d9d981")
        self.e_trenchgrate.configure(selectbackground="#c4c474")

        self.l_popup = ttk.Label(self.TNotebook1_pg1)
        self.l_popup.place(relx=0.73, rely=0.19, height=16, width=44)
        self.l_popup.configure(background="#d9d9d9")
        self.l_popup.configure(foreground="#000000")
        self.l_popup.configure(relief=FLAT)
        self.l_popup.configure(text='''Pop-up''')

        self.l_yfit = ttk.Label(self.TNotebook1_pg1)
        self.l_yfit.place(relx=0.41, rely=0.05, height=16, width=25)
        self.l_yfit.configure(background="#d9d9d9")
        self.l_yfit.configure(foreground="#000000")
        self.l_yfit.configure(relief=FLAT)
        self.l_yfit.configure(text='''Y-fit''')

        self.l_coupling = ttk.Label(self.TNotebook1_pg1)
        self.l_coupling.place(relx=0.36, rely=0.19, height=16, width=54)
        self.l_coupling.configure(background="#d9d9d9")
        self.l_coupling.configure(foreground="#000000")
        self.l_coupling.configure(relief=FLAT)
        self.l_coupling.configure(text='''coupling''')

        self.l_sgrate = ttk.Label(self.TNotebook1_pg1)
        self.l_sgrate.place(relx=0.31, rely=0.33, height=16, width=79)
        self.l_sgrate.configure(background="#d9d9d9")
        self.l_sgrate.configure(foreground="#000000")
        self.l_sgrate.configure(relief=FLAT)
        self.l_sgrate.configure(text='''square-grate''')
        self.l_sgrate.configure(cursor="fleur")

        self.l_tgrate = ttk.Label(self.TNotebook1_pg1)
        self.l_tgrate.place(relx=0.68, rely=0.05, height=16, width=78)
        self.l_tgrate.configure(background="#d9d9d9")
        self.l_tgrate.configure(foreground="#000000")
        self.l_tgrate.configure(relief=FLAT)
        self.l_tgrate.configure(text='''trench-grate''')

        self.l_spout = ttk.Label(self.TNotebook1_pg1)
        self.l_spout.place(relx=0.68, rely=0.33, height=16, width=75)
        self.l_spout.configure(background="#d9d9d9")
        self.l_spout.configure(foreground="#000000")
        self.l_spout.configure(relief=FLAT)
        self.l_spout.configure(text='''spout-adapt''')

        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.0, rely=0.36, relheight=0.63, relwidth=1.01)
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(highlightbackground="#d9d981")
        self.Frame1.configure(width=605)

        self.results = ScrolledText(self.Frame1)
        self.results.place(relx=0.02, rely=0.0, relheight=0.98, relwidth=0.97)
        self.results.configure(background="white")
        self.results.configure(font="TkTextFont")
        self.results.configure(insertborderwidth="3")
        self.results.configure(selectbackground="#c4c4c4")
        self.results.configure(width=10)
        self.results.configure(wrap=NONE)

        self.Frame3 = Frame(top)
        self.Frame3.place(relx=0.03, rely=0.25, relheight=0.08, relwidth=0.93)
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief=GROOVE)
        self.Frame3.configure(highlightbackground="#d9d981")
        self.Frame3.configure(width=555)

        self.b_estimate = Button(self.Frame3)
        self.b_estimate.place(relx=0.43, rely=0.22, height=26, width=79)
        self.b_estimate.configure(activebackground="#d9d9d9")
        self.b_estimate.configure(command=self.main)
        self.b_estimate.configure(disabledforeground="#a3a361")
        self.b_estimate.configure(highlightbackground="#d9d981")
        self.b_estimate.configure(text='''Estimate''')

    def main(self):


        length      = int(self.e_length.get())
        width       = int(self.e_width.get())
        height      = int(self.e_depth.get())
        corregated  = 3
        spout_adapt = 0
        tractor     = self.e_tractor.get()
        labor       = self.e_labor.get()
        miles       = self.e_miles.get()
        pop_up      = self.e_popup.get()
        squaregrate = self.e_squaregrate.get()
        coupling    = self.e_coupling.get()
        yfit        = self.e_yfit.get()
        trenchgrate = self.e_trenchgrate.get()
        customer = ''
        phone = ''
        email = ''
        lead = ''
        markup = 1.45 


        job = Frenchdrain(corregated, yfit, coupling, squaregrate,
                trenchgrate, pop_up, spout_adapt, customer,
                email, phone, lead, markup, length, width,
                height)

        refresh = job.__str__()

        self.results.delete(1.0, END)
        new = self.results.insert(INSERT, refresh)

        return new





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



